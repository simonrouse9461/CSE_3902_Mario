Andrew Miller
7/2/2015
Sprint 4

File: MarioCollisionHandler.cs
File Author: Chuhan Feng
Time: 10 minutes

At first glance there are 4 methods that handle Mario's collision in the game world: HandleEnemy(),
HandleFireflower(), HandleStar(), and HandleMushroom(). The names are descriptive enough that it is
clear what each method does. However, when you read into the methods, the execution of them becomes
slightly less clear. There seem to be many method calls and checks, which make sense since there are
many objects that need to be checked which side is being collided with, but then there are also
SwitchComponent calls. These calls seem to change something about the Mario, but they don't change 
anything as distinctly as the HandleMushroom() method does when it calls BecomeBig(). If there was
a little more clarification in the Star method, it would make the code much more readable and anyone
outside the project would be able to understand what this method does.

The HandleEnemy() method is even more complex. It seems to check for any type of enemy, but then it
also checks to see if the Koopa is in the shell state, which makes sense. However, there are 
parameters enemy => enemy.Alive, which would appear to check if the enemy is alive at the time of the
collision, but it is unclear why these parameters are written in this manner. It detracts from the
readability of the overall function slightly because of the strange way it is written.

Overall, the methods are clear with their names so it is fairly simple to understand the function of
them after reading for a few minutes. The only improvements would be to make the Star method slightly
more readable by either putting in comments or improving the names of the method calls.